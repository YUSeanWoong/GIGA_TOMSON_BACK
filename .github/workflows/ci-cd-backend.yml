name: Backend CI/CD

# main Î∏åÎûúÏπòÏóê Push ÎòêÎäî Pull Request ÏãúÏóê Ïã§Ìñâ
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Make Gradle wrapper executable
        run: chmod +x gradlew

      # 2) JDK ÏÑ§Ïπò
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3) Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÎπåÎìú (Gradle Í∏∞Ï§Ä)
      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      # 4) Îã®ÏúÑ ÌÖåÏä§Ìä∏
      - name: Run tests
        run: ./gradlew test

      # 5) GCP Ïù∏Ï¶ù (ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 6) Docker ‚Üí Artifact Registry Ïù∏Ï¶ù ÏÑ§Ï†ï
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker --quiet asia-northeast3-docker.pkg.dev

      # 7) Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
      - name: Build & Tag Docker image
        run: |
          REPO=tomson-backend
          IMAGE=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/${{ secrets.BACKEND_SERVICE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE .



      # 8) Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
      - name: Push to Artifact Registry
        run: |
          REPO=tomson-backend
          IMAGE=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/${{ secrets.BACKEND_SERVICE_NAME }}:${{ github.sha }}
          docker push $IMAGE
#      # 9-0) SSH ÌÇ§ Ï†ÄÏû•
#      - name: üîê Save SSH private key
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.VM_SSH_KEY }}" | tr -d '\r' > ~/.ssh/vm_deploy_key
#          chmod 600 ~/.ssh/vm_deploy_key

#      # 9-0) ÎîîÎ≤ÑÍπÖ
#      - name: üõ†Ô∏è Check saved SSH key on runner
#        run: |
#          echo "Trying to connect to ${{ secrets.VM_HOST }}"
#          echo "‚úÖ Check SSH directory:"
#          ls -al ~/.ssh || echo "‚ùå ~/.ssh directory does not exist"
#
#          echo "‚úÖ Check key file existence:"
#          if [ -f ~/.ssh/vm_deploy_key ]; then
#            echo "‚úîÔ∏è Key file exists."
#            head -n 5 ~/.ssh/vm_deploy_key
#          else
#            echo "‚ùå Key file missing."
#          fi
#
#
#      # 9-1) 2Îã®Í≥Ñ
#      - name: üß™ Test SSH connection with verbose logs
#        run: |
#          ssh -vvv -o StrictHostKeyChecking=no \
#              -o UserKnownHostsFile=/dev/null \
#              -i ~/.ssh/vm_deploy_key \
#              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
#              "echo '‚úÖ SSH Ï†ëÏÜç ÏÑ±Í≥µ! VMÏóêÏÑú Î™ÖÎ†πÏù¥ Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§.'"



       # 9) VMÏóê SSHÎ°ú Ï†ëÏÜçÌï¥ Ïª®ÌÖåÏù¥ÎÑà ÏóÖÎç∞Ïù¥Ìä∏
      - name: Deploy to VM via SSH

        env :
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          KAKAO_REDIRECT_URL: ${{ secrets.KAKAO_REDIRECT_URL }}

        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          REPO=tomson-backend
          IMAGE=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/${{ secrets.BACKEND_SERVICE_NAME }}:${{ github.sha }}
        
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -i ~/.ssh/id_rsa \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
              "set -Eeuo pipefail
               set -x
          
               DB_URL='${DB_URL}'
               DB_USERNAME='${DB_USERNAME}'
               DB_PASSWORD='${DB_PASSWORD}'
               KAKAO_REST_API_KEY='${KAKAO_REST_API_KEY}'
               KAKAO_REDIRECT_URL='${KAKAO_REDIRECT_URL}'
               JWT_SECRET='${JWT_SECRET}'
               JWT_ISSUER='${JWT_ISSUER}'
          
               mkdir -p ~/deploy && cd ~/deploy 
               
        
               echo '>>> Stop & remove old container'
               docker pull $IMAGE
          
               echo '>>> Stop & remove old container'
               docker stop backend-container 2>/dev/null || true 
               docker rm backend-container 2>/dev/null || true 
          
               echo '>>> Run new container'
               docker run -d --name backend-container \
               --network appnet \
               --expose 8080 \
               -e SPRING_DATASOURCE_URL=\"\$DB_URL\" \
               -e SPRING_DATASOURCE_USERNAME=\"\$DB_USERNAME\" \
               -e SPRING_DATASOURCE_PASSWORD=\"\$DB_PASSWORD\" \
               -e KAKAO_REST_API_KEY=\"\$KAKAO_REST_API_KEY\" \
               -e KAKAO_REDIRECT_URL=\"\$KAKAO_REDIRECT_URL\" \
               -e JWT_SECRET=\"\$JWT_SECRET\" \
               -e JWT_ISSUER=\"\$JWT_ISSUER\" \
                $IMAGE && \
              
               echo '>>> Wait and verify container status'
               sleep 5
               if [ \$(docker inspect -f '{{.State.Running}}' backend-container || echo false) != 'true' ]; then
                 echo '‚ùå Container is not running. Logs:'
                 docker logs --tail=300 backend-container || true
                 docker ps -a || true
                 exit 1
               fi

               echo '‚úÖ Container is running successfully'
                
               docker images --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' \
               | grep 'tomson-backend' \
               | sort -rk2 | awk 'NR>2 {print \$1}' | xargs -r docker rmi"



#      # 9) Cloud Run Î∞∞Ìè¨
#      - name: Deploy to Cloud Run
#        run: |
#          REPO=tomson-backend
#          gcloud run deploy ${{ secrets.BACKEND_SERVICE_NAME }} \
#            --image asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/${{ secrets.BACKEND_SERVICE_NAME }}:${{ github.sha }} \
#            --region ${{ secrets.GCP_REGION }} \
#            --platform managed \
#            --allow-unauthenticated

